/*

* List of global variables that are declared here.
*/
var isUsersTurn     = true ;
var playerName ;
var playerPos       = 0 ;
var computerPos     = 0 ;
var board           = new Array
                        (
                            0,1,2,18,4,5,6,
                            7,8,9,10,11,12,13,
                            14,15,16,17,18,5,20,
                            21,22,23,39,25,26,8,
                            28,53,30,31,32,33,34,
                            35,36,37,38,39,40,41,
                            42,43,44,45,46,47,63,
                            49,50,51,52,53,54,55,
                            56,57,41,59,60,61,32,
                            63,64
                        );
var lastStraw       = board[ board.length -1 ];
var dice            = 0 ;
var statusMessage   = "" ;
var isGameEnded     = true ;
var power           = 10 ;
var tempPower       = 10 ;
var cellWidth       = 60 ;
var rowLength       = 8 ;
var baseTop1        = -3 ;
var baseLeft1       = -488 ;
var baseTop2        = -31 ;
var baseLeft2       = -537 ;
/******************************************************************************/                
/**
*
* Functions definitions start.
*/
/******************************************************************************/
/**
* This is the onLoad Function
*
*/
function selectBoard()
{
    // selectBoard is id of <select tag that selects the board>
    // Second board is present for future. 
    boardOpt = document.getElementById('selectBoard').selectedIndex ;
    if(boardOpt == 1)
    {
        board       = new Array
                        (
                            0,1,2,18,4,5,6,
                            7,8,9,10,11,12,13,
                            14,15,16,17,18,5,20,
                            21,22,23,39,25,26,8,
                            28,53,30,31,32,33,34,
                            35,36,37,38,39,40,41,
                            42,43,44,45,46,47,63,
                            49,50,51,52,53,54,55,
                            56,57,41,59,60,61,32,
                            63,64
                        );
       cellWidth    = 60 ;
    }
    else
    {
        board       = new Array
                        {
                            1,2,3,24,5,6,7,34,9,
                            10,11,12,13,14,5,16,17,18,19,
                            20,21,42,23,24,73,26,27,28,29,
                            31,31,9,33,34,18,36,37,19,39,
                            40,41,42,43,78,45,46,47,48,53,
                            50,51,52,53,54,55,56,57,41,59,
                            61,61,62,63,64,26,66,67,68,69,
                            70,71,93,73,74,75,76,77,78,79,
                            80,63,82,83,96,85,86,87,88,89,
                            69,91,92,93,33,95,96,97,64,99,
                            100
                        };
        cellWidth   = 60 ;
    }
    lastStraw       = board[ board.length -1 ];
}
/******************************************************************************/
/**
* This function gets random numbers from 1-6.
*/
function getRandomNumber1()
{
    var dice = Math.floor(Math.random()*10) ;
    if(dice == 0 || dice > 6)
    {
        dice = getRandomNumber();
    }    
    return dice ;
}
function getRandomNumber()
{
    var dice = Math.floor((Math.random()*10)%6+1) ;
    return dice ;
}
/******************************************************************************/
/**
* Function to get the delay effect and do the subsequent prcessing. 
* This is a very bad delay function. The <sequential> delay here is generated by 
* acutally using the duration parameter of the dojo.animateProperty.
* There are other good ways of acheiving delay like 
* 1.dummyDelay1() -- see the bottom of the file.
*   This method uses dangling functions which call each other while 
*   setTimeOut() is one of them. It sis a good way of generating delay but,
*   setTimeout() creates a seperate thread for every call. Hence, the main 
*   function continues to execute prallelly and read global variables value is 
*   currupted value.
* 2.dummyDelay2() -- see the bottom of the file.
*   This method uses Date() function which returns a long to get the delay. 
*   This is a horrible method since, it literrally pauses the whole computer 
*   Also, browsers give out a warning when this method is used. They say
*   "The Script is taking long to execute. Do you wish to stop the script."
*   This satisfies our requirements of a <sequential> delay but its not an
*   advisable way of generating delay. 
*/
function dojoDelay()
{
    dojo.animateProperty
    (
        {
            node        : dojo.byId("smiley"), duration: 50,
            properties  : 
                            {
                                color: { start: "#C1D11C", end: "#F49500" }
                            },
            onEnd       : function()
                            {
                                diceID = isUsersTurn?"dice1":"dice2" ;
                                if(power-- > 0)
                                {
                                    dice = getRandomNumber();
                                    document.getElementById(diceID).src = "images/"+dice+".PNG" ;
                                    dojoDelay(power);
                                }
                                else
                                {
                                    resolvePosition();
                                    if(isUsersTurn)
                                    {
                                        movePiece(isUsersTurn, playerPos);
                                        showCoinPositions();
                                        isUsersTurn = !isUsersTurn ;
                                        throwDice();
                                    }
                                    else
                                    {
                                        movePiece(isUsersTurn, computerPos);
                                        showCoinPositions();
                                        isUsersTurn = !isUsersTurn ;
                                    }
                                }
                            }
        }
    ).play();
}
/******************************************************************************/
/**
* Function that is called when dice is thrown. Game playing function.
*/
function throwDice()
{
    if(isGameEnded)
    {
        statusMessage   = " Start a new game to play." ;
        updateStatusMessage(statusMessage);
        return ;
    }
    if(isUsersTurn)
    {
        // alert("its user's turn");
        getPower();
        dojoDelay();      
    }
    else
    {
        /**
        * Function that handles computer's game.
        * It has to first say, it's computer's turn for throwing dice.
        * Then, it has to wait for a while.
        * Then, computer has to throw some value.
        * Then, throw the dice and move the piece.
        */
        getPower();
        dojoDelay();             
    }
    
}
/******************************************************************************/
/**
* Function to start the game.
*/               
function startGame()
{
    // alert("The last straw is "+lastStraw);
    isGameEnded     = false ;
    playerName      = prompt ("With what name do you want to go in this game? ","Mr. Invincible");
    computerPos     = playerPos = 1 ;
    statusMessage   = "Welcome, "+playerName+"!" ;
    showCoinPositions();
    updateStatusMessage(statusMessage) ;
    statusMessage   = "";
    updateEvents(statusMessage);
    initializePawns();
}
/******************************************************************************/
/**
* Function to end the game.
*/ 
function endGame()
{
    if(isGameEnded == true)
    {
        statusMessage   = " Game is already ended or haven't started.";
        updateStatusMessage(statusMessage) ;
        return ;
    }
    isGameEnded     = true ;
    computerPos     = playerPos = 1 ;
    statusMessage   = " So, you gave up? ";
    showCoinPositions();
    vanishPawns();
    updateStatusMessage(statusMessage) ;
}
/******************************************************************************/
/**
*
*
*/
function showCoinPositions()
{
    document.getElementById('compPos').innerHTML = computerPos;
    document.getElementById('playPos').innerHTML = playerPos;   
}
/******************************************************************************/
/**
* This function checks if the dice value thrown is a valid value concerning
* the present position. If valid It moves the dice.
*/
function resolvePosition()
{
    // If it is user's turn then consider the dice value.
    if(isUsersTurn)
    {
        if(playerPos+ dice > lastStraw)
        {
            statusMessage = "Ha, that's too high a value. Stay there!"
            updateStatusMessage(statusMessage);
            return ;
        }
        else
        {
            if(board[playerPos+ dice] > (playerPos + dice))
            {
                statusMessage = "You got a ladder.!"
            }
            else if(board[playerPos+ dice] < (playerPos + dice))
            {
                statusMessage = "Ha ha!.. You got bitten by a snake. :)"
            }
            else
            {
                statusMessage = "" ;
            }
            playerPos = board[playerPos+ dice];
            updateStatusMessage(statusMessage);
        }
    }
    // It is computer's turn.
    else
    {
        if(computerPos+ dice > lastStraw)
        {
            statusMessage = "I can't move... :( "
            updateEvents(statusMessage);
            return ;
        }
        else
        {
            // alert("Comp :"+computerPos+ " dice: "+dice+ " board: "
            // +board[computerPos+ dice])
            if(board[computerPos+ dice] > (computerPos + dice))
            {
                statusMessage = "I got a ladder.!"
            }
            else if(board[computerPos+ dice] < (computerPos + dice))
            {
                statusMessage = "I got bitten by a snake.:("
            }
            else
            {
                statusMessage = "" ;
            }
            computerPos = board[computerPos+ dice];
            updateEvents(statusMessage);
        }
    }
    if((playerPos ==lastStraw) || (computerPos == lastStraw))
    {
        var message     = (playerPos==lastStraw)?"Huh, I let you win.":"You loose ! ;)" ;
        statusMessage   = "Game over! "+message ;
        updateStatusMessage(statusMessage);
        isGameEnded     = true ;
        alert("Game over! "+message) ; 
    }
}
/******************************************************************************/
/**
*
*
*/
function getPower()
{
    
    if(tempPower < 1 )
    {
        power = 10 ;
    }
    else 
    {
        power = Math.floor(tempPower);
    }
    // alert(power);
}
/******************************************************************************/
/**
*
*
*/
function updateStatusMessage(message)
{
    document.getElementById('message').innerHTML = message ;
}
/******************************************************************************/
function updateEvents(message)
{
    document.getElementById('events').innerHTML = message ; 
}
/******************************************************************************/
/**
*
*
*/
function movePiece(isUsersTurn,newPos)
{
    
    var reminderMin1= (newPos%rowLength ==0)?0:(newPos%rowLength) - 1 ;
    var quotient    = Math.floor(newPos/(rowLength)) ;
    var newTop      = (isUsersTurn)?baseTop1 : baseTop2 ;
    var newLeft     = (isUsersTurn)?baseLeft1: baseLeft2;
    // alert("before: Rem :"+reminder+" Quo: "+quotient+" BTop: "+newTop+" BLeft: "
    //                                          +newLeft+ " Turn: "+isUsersTurn);    
    newTop          = (newPos%rowLength ==0)?(newTop- (quotient-1)*cellWidth):(newTop- quotient*cellWidth) ;
    newLeft         = newLeft+ ((quotient%2==0)?(reminderMin1*cellWidth):((rowLength-reminderMin1-1)*cellWidth)) ;
    //alert("before: Rem :"+reminder+" Quo: "+quotient+" BTop: "+newTop+" BLeft: "
    //                                         +newLeft+ " Turn: "+isUsersTurn);    
    var div         = (isUsersTurn)? "icon1" : "icon2" ;
    //alert("Div: "+div) ;
    document.getElementById(div).style.top = newTop+"px" ; 
    document.getElementById(div).style.left= newLeft+"px"; 
    
}
/******************************************************************************/
function initializePawns()
{
    // alert("initializing the pawns");
    document.getElementById('icon1').style.top = baseTop1+"px" ; 
    document.getElementById('icon1').style.left= baseLeft1+"px" ; 
    document.getElementById('icon1').style.display = "" ; 
    document.getElementById('icon2').style.top = baseTop2+"px" ; 
    document.getElementById('icon2').style.left= baseLeft2+"px" ; 
    document.getElementById('icon2').style.display = "" ; 
}
/******************************************************************************/
function vanishPawns()
{
    // alert("into vanishing act");
    document.getElementById('icon1').style.display = "none" ; 
    document.getElementById('icon2').style.display = "none" ; 
}
/******************************************************************************/
function dummyDelay2(amount)
{
    var startTime       = new Date();
    var currentTime     = new Date();
    while(ccurrentTime - startTime < amount)
    {
        currentTime     = new Date();
    }
}
/******************************************************************************/
function dummyDelay1()
{
    showDice();
}
/******************************************************************************/
function showDice()
{
    diceID = isUsersTurn?"dice1":"dice2" ;
    if(power-- > 0)
    {
        dice = getRandomNumber();
        // alert("insider"+dice);
        // Call method to get some delay ;
        // delay();
        setTimeout('showDice()',70);
        document.getElementById(diceID).src = "images/"+dice+".PNG" ;
    }
    else
    {
        return ;
    }
}
/******************************************************************************/
/**
* Function to get the delay effect.
*/
function delay()
{
    setTimeout('showDice()',70);
}     
/******************************************************************************/